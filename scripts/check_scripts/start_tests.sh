#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–ª–∞—Å—Å–æ–≤, –∏–∑–º–µ–Ω—ë–Ω–Ω—ã—Ö –≤ git (staged –∏–ª–∏ –≤ diff)

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
find_project_root() {
    local current_dir="$PWD"

    while [[ "$current_dir" != "/" ]]; do
        if [[ -f "$current_dir/composer.json" ]]; then
            echo "$current_dir"
            return 0
        fi
        current_dir=$(dirname "$current_dir")
    done

    error "–ù–µ –Ω–∞–π–¥–µ–Ω –∫–æ—Ä–µ–Ω—å Laravel –ø—Ä–æ–µ–∫—Ç–∞ (composer.json)"
    exit 1
}

# –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –ø—É—Ç–∏ —Ñ–∞–π–ª–∞ –≤ –∏–º—è –∫–ª–∞—Å—Å–∞
path_to_classname() {
    local path="$1"

    # –£–±–∏—Ä–∞–µ–º .php —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
    path="${path%.php}"

    # –£–¥–∞–ª—è–µ–º 'app/' –≤ –Ω–∞—á–∞–ª–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
    path="${path#app/}"

    # –ó–∞–º–µ–Ω—è–µ–º / –Ω–∞ \
    local classname="${path//\//\\}"
    echo "$classname"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω—É–∂–Ω–æ –ª–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∞—Å—Å
should_be_tested() {
    local classname="$1"

    # –ò—Å–∫–ª—é—á–µ–Ω–∏—è ‚Äî –Ω–µ —Ç–µ—Å—Ç–∏—Ä—É–µ–º
    local exclude_patterns=("*Controller*" "*DTO*" "*ValueObject*" "*Enum*" "*Exception*" "*Migration*" "*Seeder*")

    for pattern in "${exclude_patterns[@]}"; do
        if [[ "$classname" == $pattern ]]; then
            return 1
        fi
    done

    # –¢–∏–ø—ã –∫–ª–∞—Å—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å
    local testable_types=("Service" "Repository" "Helper" "Job" "Command" "Middleware" "Policy" "Rule" "Resource" "Request" "Model" "Observer" "Listener" "Mail" "Notification")

    for type in "${testable_types[@]}"; do
        if [[ "$classname" == *"$type" ]]; then
            return 0
        fi
    done

    return 1
}

# –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –∏–º–µ–Ω–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞
get_expected_test_classname() {
    local classname="$1"
    echo "Tests\\Unit\\${classname}Test"
}

# –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∫–ª–∞—Å—Å–∞ –∏–∑ —Ñ–∞–π–ª–∞
extract_classname_from_file() {
    local file="$1"

    if [[ ! -f "$file" ]]; then
        return 1
    fi

    local namespace=""
    local classname=""

    # –ò—â–µ–º namespace
    namespace=$(grep -m1 "^namespace " "$file" | sed 's/namespace \(.*\);/\1/' | tr -d ' ')

    # –ò—â–µ–º –∏–º—è –∫–ª–∞—Å—Å–∞
    classname=$(grep -m1 "^class " "$file" | sed 's/class \([a-zA-Z0-9_]*\).*/\1/')

    if [[ -n "$namespace" && -n "$classname" ]]; then
        echo "${namespace}\\${classname}"
    fi
}

# –ü–æ–∏—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–ª–∞—Å—Å–æ–≤ –∏ –∏—Ö –ø—É—Ç–µ–π
find_test_class_path() {
    local test_classname="$1"
    local project_root="$2"

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–º—è –∫–ª–∞—Å—Å–∞ –≤ –ø—É—Ç—å
    local test_path="${test_classname//\\//}.php"

    echo $test_path

    local full_path="$project_root/tests/${test_path#*Tests/}"

    if [[ -f "$full_path" ]]; then
        return 0
    fi
    return 1
}

# –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –¥–ª—è –∫–ª–∞—Å—Å–∞
run_test_for_class() {
    local test_classname="$1"
    local project_root="$2"

    local test_file=$(find_test_class_path "$test_classname" "$project_root")

    if [[ -z "$test_file" ]]; then
        error "–¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è: $test_classname"
        return 1
    fi

    local classname=$(basename "$test_file" .php)
    echo "$classname"

    info "–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: $test_classname"
    info "–§–∞–π–ª: $classname"

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç —á–µ—Ä–µ–∑ artisan —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –ø–æ –∏–º–µ–Ω–∏ –∫–ª–∞—Å—Å–∞
    cd "$project_root"
    if php artisan test --filter="$classname"; then
        success "–¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω: $test_classname"
        return 0
    else
        error "–¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: $test_classname"
        return 1
    fi
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –∏ –∑–∞–ø—É—Å–∫–∞
analyze_and_run_tests() {
    local app_file="$1"
    local project_root="$2"

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ –∏–º—è –∫–ª–∞—Å—Å–∞
    local normalized_classname=$(path_to_classname "$app_file")



    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å
    if ! should_be_tested "$normalized_classname"; then
        warning "–ö–ª–∞—Å—Å –Ω–µ —Ç—Ä–µ–±—É–µ—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: $normalized_classname"
        echo "---"
        return 0
    fi

    # –ü–æ–ª—É—á–∞–µ–º –æ–∂–∏–¥–∞–µ–º–æ–µ –∏–º—è —Ç–µ—Å—Ç–∞
    local expected_test=$(get_expected_test_classname "$normalized_classname")

    echo $expected_test

#    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª —Ç–µ—Å—Ç–∞
#    local test_file_path=$(find_test_class_path "$expected_test" "$project_root")
#
#    if [[ -z "$test_file_path" ]]; then
#        error "–°–æ–∑–¥–∞–π—Ç–µ —Ç–µ—Å—Ç: $expected_test"
#        echo "---"
#        return 1
#    fi

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
    if run_test_for_class "$expected_test" "$project_root"; then
        echo "---"
        return 0
    else
        echo "---"
        return 1
    fi
}

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    local COMMAND="$1"

    if [ "$COMMAND" = "commit" ]; then
        ALL_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep '\.php$' || true)
    elif [ "$COMMAND" = "push" ]; then
        BRANCH=$(git rev-parse --abbrev-ref HEAD 2>/dev/null)
        if [ -z "$BRANCH" ] || [ "$BRANCH" = "HEAD" ]; then
            error "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–µ–∫—É—â—É—é –≤–µ—Ç–∫—É"
            exit 1
        fi
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ origin/$BRANCH
        if ! git ls-remote --exit-code origin "$BRANCH" >/dev/null 2>&1; then
            warning "–í–µ—Ç–∫–∞ origin/$BRANCH –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ‚Äî —Ç–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ staged —Ñ–∞–π–ª—ã"
            ALL_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep '\.php$' || true)
        else
            ALL_FILES=$(git diff --name-only origin/"$BRANCH" --diff-filter=ACM | grep '\.php$' || true)
        fi
    else
        error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: $COMMAND (–æ–∂–∏–¥–∞–µ—Ç—Å—è 'commit' –∏–ª–∏ 'push')"
        exit 1
    fi

    if [ -z "$ALL_FILES" ]; then
        success "[RunTests] –ù–µ—Ç PHP-—Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!"
        exit 0
    fi

    local project_root=$(find_project_root)
    local has_failures=0

    while IFS= read -r app_file; do
        if [[ -z "$app_file" ]]; then
            continue
        fi

        if ! analyze_and_run_tests "$app_file" "$project_root"; then
            has_failures=1
        fi
    done <<< "$ALL_FILES"

    if [ "$has_failures" -eq 1 ]; then
        error "‚ùó –û–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤ –Ω–µ –ø—Ä–æ—à–ª–∏ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç."
        exit 1
    else
        success "üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –¥–ª—è –∏–∑–º–µ–Ω—ë–Ω–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω—ã!"
        exit 0
    fi
}

# –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
main "$@"

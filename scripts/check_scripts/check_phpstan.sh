#!/bin/bash

# –ü–†–û–í–ï–†–Ø–ï–ú –ù–û–í–´–ï –§–ê–ô–õ–´

COMMAND="$1"  # commit –∏–ª–∏ push

if [ "$COMMAND" = "commit" ]; then
    # —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã (—Å—Ç–∞—Ç—É—Å A = Added)
    NEW_FILES=$(git diff --cached --name-only --diff-filter=A | grep '\.php$')

    if [ -z "$NEW_FILES" ]; then
        echo "‚úÖ –ù–µ—Ç –Ω–æ–≤—ã—Ö PHP-—Ñ–∞–π–ª–æ–≤. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É PHPStan –¥–ª—è –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤."
    else
        echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ PHPStan —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤..."
        ./vendor/bin/phpstan analyse --no-progress --error-format=table $NEW_FILES
        if [ $? -ne 0 ]; then
          echo "‚ùå –ù–û–í–´–ï –§–ê–ô–õ–´! PHPStan –Ω–∞—à—ë–ª –æ—à–∏–±–∫–∏ —Ç–∏–ø–∏–∑–∞—Ü–∏–∏ (–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û)"
          exit 1
        fi
    fi
fi


# ===============

# –ü–†–û–í–ï–†–Ø–ï–ú –ò–ó–ú–ï–ù–ï–ù–ù–´–ï –§–ê–ô–õ–´

BASELINE_FILE=".phpstan-error-count.json"
BLOCK_COMMIT=0

if [ "$COMMAND" = "commit" ]; then
    ALL_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep '\.php$' || true)
elif [ "$COMMAND" = "push" ]; then
    BRANCH=$(git rev-parse --abbrev-ref HEAD)
    ALL_FILES=$(git diff --name-only origin/$BRANCH --diff-filter=ACM | grep '\.php$' || true)
else
    echo "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: $COMMAND"
    exit 1
fi

if [ ! -f "$BASELINE_FILE" ]; then
    echo "{}" > "$BASELINE_FILE"
fi

if [ -z "$ALL_FILES" ]; then
  echo "‚úÖ [PHPStan] –ù–µ—Ç PHP-—Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏."
  exit 0
fi

echo "üîç [PHPStan] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤"

for FILE in $ALL_FILES; do
    echo "üìÑ –ü—Ä–æ–≤–µ—Ä–∫–∞: $FILE"

    # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Ä—Å–∏—é —Ñ–∞–π–ª–∞ –∏–∑ HEAD
    TMP_BEFORE=$(mktemp)
    ERR_OLD=$(jq -r --arg file "$FILE" '.[$file] // 0' "$BASELINE_FILE")
    rm "$TMP_BEFORE"

    # –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è —Ñ–∞–π–ª–∞ (staged-–∫–æ–Ω—Ç–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å —Ä–∞–±–æ—á–∏–º –∫–∞—Ç–∞–ª–æ–≥–æ–º)
    ERR_NEW=$(vendor/bin/phpstan analyse --error-format=raw --no-progress "$FILE" 2>/dev/null | grep -c '^')

    # —É—Å–ª–æ–≤–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    TARGET=$((ERR_OLD - 1))
    if [ "$TARGET" -lt 0 ]; then
        TARGET=0
    fi

    if [ "$ERR_OLD" -eq 0 ] && [ "$ERR_NEW" -eq 0 ]; then
        echo "‚úÖ –ù–æ–≤—ã–π —Ñ–∞–π–ª. –ë–µ–∑ –æ—à–∏–±–æ–∫."
    elif [ "$ERR_NEW" -le "$TARGET" ]; then
        echo "‚úÖ –£–ª—É—á—à–µ–Ω–æ: –±—ã–ª–æ $ERR_OLD, —Å—Ç–∞–ª–æ $ERR_NEW"
        jq --arg file "$FILE" --argjson errors "$ERR_NEW" '.[$file] = $errors' "$BASELINE_FILE" > "$BASELINE_FILE.tmp" && mv "$BASELINE_FILE.tmp" "$BASELINE_FILE"
    else
        echo "‚ùå –û—à–∏–±–æ–∫: $ERR_NEW (–Ω—É–∂–Ω–æ ‚â§ $TARGET)"
        vendor/bin/phpstan analyse --no-progress --error-format=table "$FILE"
        BLOCK_COMMIT=1
    fi

    echo "------------------"
done

if [ "$BLOCK_COMMIT" -eq 1 ]; then
    echo "‚õî –ö–æ–º–º–∏—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£–º–µ–Ω—å—à–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫ –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–µ–π."
    exit 1
fi

# –û–±–Ω—É–ª—è–µ–º baseline –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∫–æ–º–º–∏—Ç–∞
#jq -n '{}' > "$BASELINE_FILE"

echo "‚úÖ [PHPStan] –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ."

# ===============

exit 0

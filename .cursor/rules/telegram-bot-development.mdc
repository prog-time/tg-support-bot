---
description: Telegram bot development patterns and best practices
---

# Telegram Bot Development Guidelines

## Webhook Handling
- Use [app/Http/Controllers/TelegramBotController.php](mdc:app/Http/Controllers/TelegramBotController.php) for webhook processing
- Implement proper webhook validation and security
- Handle rate limiting using [app/Services/Telegram/TelegramRateLimitService.php](mdc:app/Services/Telegram/TelegramRateLimitService.php)

## Message Processing
- Use [app/Services/Tg/TgMessageService.php](mdc:app/Services/Tg/TgMessageService.php) for sending messages
- Use [app/Services/Tg/TgEditMessageService.php](mdc:app/Services/Tg/TgEditMessageService.php) for editing messages
- Implement proper error handling for Telegram API failures

## DTOs and Data Structures
- Use [app/DTOs/TelegramUpdateDto.php](mdc:app/DTOs/TelegramUpdateDto.php) for incoming updates
- Use [app/DTOs/TelegramAnswerDto.php](mdc:app/DTOs/TelegramAnswerDto.php) for responses
- Use [app/DTOs/TGTextMessageDto.php](mdc:app/DTOs/TGTextMessageDto.php) for text messages

## Rate Limiting
- Respect Telegram's rate limits (20 messages per second)
- Use Redis for rate limiting storage
- Implement exponential backoff for failed requests

## File Handling
- Use [app/Services/File/FileService.php](mdc:app/Services/File/FileService.php) for file operations
- Implement proper file validation and security checks
- Handle file uploads and downloads efficiently

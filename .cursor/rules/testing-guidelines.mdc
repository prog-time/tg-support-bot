---
globs: tests/**/*.php
---

# Testing Guidelines

## Test Structure
- Use [tests/TestCase.php](mdc:tests/TestCase.php) as the base test class
- Organize tests by feature/domain in appropriate directories
- Use descriptive test method names that explain the scenario

## Unit Testing
- Test individual services and methods in isolation
- Mock external dependencies (APIs, databases)
- Test both success and failure scenarios
- Use [tests/Factories/](mdc:tests/Factories/) for test data creation

## Test Examples
- [tests/Unit/External/ExternalMessageServiceTest.php](mdc:tests/Unit/External/ExternalMessageServiceTest.php) - External message service testing
- [tests/Unit/Telegram/TelegramRateLimitServiceTest.php](mdc:tests/Unit/Telegram/TelegramRateLimitServiceTest.php) - Rate limiting service testing
- [tests/Unit/TG/TgMessageServiceTest.php](mdc:tests/Unit/TG/TgMessageServiceTest.php) - Telegram message service testing

## Testing Best Practices
- Use database transactions for test isolation
- Clean up test data after each test
- Test edge cases and error conditions
- Use meaningful assertions and error messages
- Group related tests using `describe` blocks when appropriate

## Mocking and Stubbing
- Mock external API calls to avoid network requests
- Use Laravel's built-in testing helpers
- Stub time-dependent operations for consistent testing
- Mock Redis operations when testing services that use Redis
